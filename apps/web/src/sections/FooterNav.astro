---
import { classed } from "@tw-classed/core";

const navItem = classed(
  "nav-item flex gap-1 items-center transition duration-250"
);

const navContainer = classed(
  "fixed z-10 left-50% -translate-x-50% w-max bg-white rounded-2xl border-black border uppercase p3",
  import.meta.env.PROD ? "bottom-6" : "bottom-8",
  "shadow-brutalism-2 filter-drop-shadow-lg"
);
---

<nav id="nav-container" class={navContainer()}>
  <div class="flex gap-4 justify-center items-center">
    <a class={navItem()} data-matcher="/" href="/">Home</a>
    <a class={navItem()} data-matcher="/blog/:path*" href="/blog">Blog</a>
    <a class={navItem()} data-matcher="/projects/:path*" href="/projects"
      >Projects</a
    >
  </div>
  <nav-indicator></nav-indicator>
</nav>

<template id="nav-indicator-template">
  <span
    id="thumb"
    class="left-0 absolute top-50% -translate-y-50% bg-black rounded-xl -z-1"
  ></span>
</template>

<script>
  import { composePatterns, type PatternMatcher } from "../utils/url";
  // @ts-ignore: Property 'UrlPattern' does not exist
  if (!globalThis.URLPattern) {
    await import("urlpattern-polyfill");
  }
  const pathname = window.location.pathname;
  const container = document.querySelector<HTMLDivElement>("#nav-container")!;

  class NavIndicator extends HTMLElement {
    thumb!: HTMLSpanElement;
    firstPass = true;
    items!: Map<string, { item: HTMLAnchorElement; pattern: URLPattern }>;
    matcher!: PatternMatcher;

    connectedCallback() {
      const content = document
        .querySelector<HTMLTemplateElement>("#nav-indicator-template")!
        .content.cloneNode(true);
      this.appendChild(content);
      this.thumb = this.querySelector<HTMLSpanElement>("span")!;

      this.loadItems();

      this.addListeners();

      this.moveToActive();
    }

    private loadItems() {
      this.items = Array.from(
        document.querySelectorAll<HTMLAnchorElement>("a.nav-item")
      ).reduce(
        (acc, item) => {
          acc.set(item.dataset.matcher!, {
            item,
            pattern: new URLPattern({ pathname: item.dataset.matcher }),
          });
          return acc;
        },
        new Map() as Map<
          string,
          { item: HTMLAnchorElement; pattern: URLPattern }
        >
      );

      this.matcher = composePatterns(
        ...Array.from(this.items.values()).map(({ pattern }) => pattern)
      );
    }

    private addListeners() {
      this.items.forEach(({ item }) => {
        item.addEventListener("mouseover", () => {
          this.move(item);
        });

        item.addEventListener("focus", () => {
          this.move(item);
        });
      });

      container.addEventListener("mouseleave", () => {
        this.moveToActive();
      });
    }

    private moveToActive() {
      const matched = this.matcher.match({
        pathname,
      });

      if (!matched) return;

      const { item } = this.items.get(matched.pathname)!;

      item!.setAttribute("aria-current", "page");

      this.items.forEach(({ item: otherItem }) => {
        if (otherItem === item) return;
        otherItem!.removeAttribute("aria-current");
      });

      this.move(item);
    }

    private move(item: HTMLElement) {
      item.dataset.indicated = "true";

      this.items.forEach(({ item: other }) => {
        if (other === item) return;
        other.dataset.indicated = "false";
      });

      this.thumb.style.width = `${item.offsetWidth + 14}px`;
      this.thumb.style.height = `${item.offsetHeight + 14}px`;
      this.thumb.style.transform = `translateX(${
        item.offsetLeft - 7
      }px) translateY(-50%)`;

      if (this.firstPass) {
        this.thumb.style.transition = "none";
        this.thumb.style.opacity = "0";
        setTimeout(() => {
          this.thumb.style.transition = "all 250ms ease";
          this.thumb.style.opacity = "1";
        }, 0);
      } else {
        this.thumb.style.transition = "all 250ms ease";
      }
      this.firstPass = false;
    }
  }

  customElements.define("nav-indicator", NavIndicator);
</script>

<style>
  .nav-item[data-indicated="true"] {
    color: white;
  }

  body {
    padding-bottom: 10rem;
    background-color: #f8f8f8;
  }
</style>
